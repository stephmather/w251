#w251
# Notes for Building Containers for W251 HW3
#Stephanie Mather

## On Jetson TX2

## Create a bridge: (internal network so containers can talk to each other)
docker network create --driver bridge hw03


### Create mqtt broker
#Create an alpine linux - based mosquitto container:
docker run --name mosquitto --network hw03 -p 1883:1883 -ti alpine sh

#We are inside the container now
#install mosquitto
apk update && apk add mosquitto
# run mosquitto
/usr/sbin/mosquitto
# Press Control-P Control-Q to disconnect from the container


##Create ubuntu (Face Detector)
#give access to camera
xhost +

#create docker container for face detector
docker run -v /usr/share/opencv4/haarcascades:/mnt/opencv --privileged -e DISPLAY --name detector --network hw03 -ti ubuntu bash

#update
apt-get update

#install OpenCV and mosquitto client tools (bit that can speak to mosquitto)
apt-get -y install build-essential
apt-get -y install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
apt install -y python -y python-opencv python-pip vim-tiny mosquitto-clients libopencv-dev

##install paho-mqtt
pip install paho-mqtt

##run facedetection.py
face_cascade = cv2.CascadeClassifier('\mnt\opencv\haarcascade_frontalface_default.xml')


## create fowarder
docker run --name forwarder --network hw03 -ti alpine sh
#install python based MQTT tools
apk add py3-paho-mqtt 
#create python code forwarder
vi forwardtoCVSI.py
#forward messages using python mqtt
python3 forwardtoCVSI.py




## Cloud Architecture
##log into vm jumpbox
#create new VSI to host mqtt broker and image procressor
ibmcloud sl vs create --hostname=<hostname> --domain=<domain> --cpu=2 --memory=2048 --datacenter=syd04 --os=UBUNTU_16_64 --san --disk=100 --key=xxxxxx

#ssh into new VSI
ssh -i ~/.ssh/id_rsa.pub root@

#Once in I disabled the ability to login in with passwords:
vi /etc/ssh/sshd_config

#PermitRootLogin prohibit-password
#PasswordAuthentication no

#install docker
#apt-get update
#apt -y install docker.io

# Create a bridge: (internal network so containers can talk to each other)
docker network create --driver bridge hw03

#create mqtt-broker
# Create an alpine linux - based mosquitto container:
docker run --name mosquitto --network hw03 -p 1883:1883 -ti alpine sh
# we are inside the container now
# install mosquitto
apk update && apk add mosquitto
# run mosquitto
/usr/sbin/mosquitto
# Press Control-P Control-Q to disconnect from the container


#create image processor and saver
# Create an ubuntu linux - based processor container:
docker run --name processor --network hw03 --privileged -ti ubuntu bash

apt-get update
apt-get -y install automake autotools-dev g++ git libcurl4-openssl-dev libfuse-dev libssl-dev libxml2-dev make pkg-config

git clone https://github.com/s3fs-fuse/s3fs-fuse.git

#create s3fs-fuse so can connect the object cloud storage to the CVSI
cd s3fs-fuse
./autogen.sh
./configure
make
make install

echo "access_key:secret_key" > $HOME/.cos_creds
chmod 600 $HOME/.cos_creds

mkdir -m 777 /mnt/hw3
s3fs bucketname /mnt/hw3 -o passwd_file=$HOME/.cos_creds -o sigv2 -o use_path_request_style -o url=http://s3.us-south.cloud-object-storage.appdomain.cloud

#Install command line tool to interact with the bucket
apt install python-pip
pip install --upgrade s3cmd

s3cmd --configure 
apt-get install vim

cat /root/.s3cfg

access_key = your_access_key
secret_key = your_secret_key
gpg_command = /usr/local/bin/gpg
# host_base = s3.private.us-south.cloud-object-storage.appdomain.cloud
# host_bucket = %(bucket)s.s3.private.us-south.cloud-object-storage.appdomain.cloud
host_base = s3.us-south.cloud-object-storage.appdomain.cloud
host_bucket = cloud-object-storage-smather-hw3-cos-standard-hq1s.s3.us-south.cloud-object-storage.appdomain.cloud
use_https = True


#Create facesaver.py
vi facesaver.py

#install Python and Paho
pip install paho-mqtt
pip install numpy

#run python and send faces to the cloud
python facesaver.py
